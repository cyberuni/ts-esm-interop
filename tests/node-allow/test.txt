  ✘ [fail]: commonjs › assert-default-as.all › assert default as
  ✘ [fail]: commonjs › assert-default.all › assert default
  ✔ commonjs › assert-star.all › assert star

  ✔ commonjs › assertron-default.all › assertron default
  ✔ commonjs › assertron-default-as.all › assertron default as
  ✔ commonjs › assertron-star.all › assertron star

  ✘ [fail]: commonjs › param-case-default.all › param-case default
  ✘ [fail]: commonjs › param-case-star.all › param-case star
  ✘ [fail]: commonjs › param-case-default-as.all › param-case default as

  ✔ commonjs › cjs-default-as.all › cjs default as
  ✔ commonjs › cjs-default.all › cjs default
  ✔ commonjs › cjs-star.all › cjs star

  ✔ commonjs › es-cjs-default-as.all › es-cjs default as
  ✔ commonjs › es-cjs-default.all › es-cjs default
  ✔ commonjs › es-cjs-star.all › es-cjs star

  ✔ commonjs › esm-cjs-default-as.all › esm-cjs default as
  ✔ commonjs › esm-cjs-default.all › esm-cjs default
  ✔ commonjs › esm-cjs-star.all › esm-cjs star


  ✔ es2015 › assert-default-as.all › assert default as
  ✔ es2015 › assert-default.all › assert default
  ✘ [fail]: es2015 › assert-star.all › assert star

  ✘ [fail]: es2015 › assertron-default-as.all › assertron default as
  ✘ [fail]: es2015 › assertron-default.all › assertron default
  ✘ [fail]: es2015 › assertron-star.all › assertron star

  ✔ es2015 › param-case-default-as.all › param-case default as
  ✔ es2015 › param-case-default.all › param-case default
  ✔ es2015 › param-case-star.all › param-case star

  ✘ [fail]: es2015 › cjs-default-as.all › cjs default as
  ✘ [fail]: es2015 › cjs-default.all › cjs default
  ✘ [fail]: es2015 › cjs-star.all › cjs star

  ✘ [fail]: es2015 › es-cjs-default.all › es-cjs default
  ✘ [fail]: es2015 › es-cjs-default-as.all › es-cjs default as
  ✘ [fail]: es2015 › es-cjs-star.all › es-cjs star

  ✔ es2015 › esm-cjs-default-as.all › esm-cjs default as
  ✔ es2015 › esm-cjs-star.all › esm-cjs star
  ✔ es2015 › esm-cjs-default.all › esm-cjs default


  ✔ es2020 › assert-default-as.all › assert default as
  ✔ es2020 › assert-default.all › assert default
  ✘ [fail]: es2020 › assert-star.all › assert star

  ✘ [fail]: es2020 › assertron-default-as.all › assertron default as
  ✘ [fail]: es2020 › assertron-default.all › assertron default
  ✘ [fail]: es2020 › assertron-star.all › assertron star

  ✔ es2020 › param-case-default-as.all › param-case default as
  ✔ es2020 › param-case-default.all › param-case default
  ✔ es2020 › param-case-star.all › param-case star

  ✘ [fail]: es2020 › cjs-default-as.all › cjs default as
  ✘ [fail]: es2020 › cjs-default.all › cjs default
  ✘ [fail]: es2020 › cjs-star.all › cjs star

  ✘ [fail]: es2020 › es-cjs-default-as.all › es-cjs default as
  ✘ [fail]: es2020 › es-cjs-default.all › es-cjs default
  ✘ [fail]: es2020 › es-cjs-star.all › es-cjs star

  ✔ es2020 › esm-cjs-default-as.all › esm-cjs default as
  ✔ es2020 › esm-cjs-default.all › esm-cjs default
  ✔ es2020 › esm-cjs-star.all › esm-cjs star


  ✔ es2022 › assert-default-as.all › assert default as
  ✔ es2022 › assert-default.all › assert default
  ✘ [fail]: es2022 › assert-star.all › assert star

  ✘ [fail]: es2022 › assertron-default-as.all › assertron default as
  ✘ [fail]: es2022 › assertron-star.all › assertron star
  ✘ [fail]: es2022 › assertron-default.all › assertron default

  ✔ es2022 › param-case-default-as.all › param-case default as
  ✔ es2022 › param-case-default.all › param-case default
  ✔ es2022 › param-case-star.all › param-case star

  ✘ [fail]: es2022 › cjs-default-as.all › cjs default as
  ✘ [fail]: es2022 › cjs-default.all › cjs default
  ✘ [fail]: es2022 › cjs-star.all › cjs star

  ✘ [fail]: es2022 › es-cjs-default-as.all › es-cjs default as
  ✘ [fail]: es2022 › es-cjs-default.all › es-cjs default
  ✘ [fail]: es2022 › es-cjs-star.all › es-cjs star

  ✔ es2022 › esm-cjs-default-as.all › esm-cjs default as
  ✔ es2022 › esm-cjs-default.all › esm-cjs default
  ✔ es2022 › esm-cjs-star.all › esm-cjs star

  ─

  commonjs › assert-default-as.all › assert default as

  commonjs/assert-default-as.all.js:6

   5: (0, ava_1.default)('assert default as', t => {
   6:     t.notThrows(() => (0, assert_1.default)(true));
   7: });

  Function threw:

  TypeError {
    message: '(0 , assert_1.default) is not a function',
  }

  › commonjs/assert-default-as.all.js:6:44
  › commonjs/assert-default-as.all.js:6:7



  commonjs › assert-default.all › assert default

  commonjs/assert-default.all.js:6

   5: (0, ava_1.default)('assert default', t => {
   6:     t.notThrows(() => (0, assert_1.default)(true));
   7: });

  Function threw:

  TypeError {
    message: '(0 , assert_1.default) is not a function',
  }

  › commonjs/assert-default.all.js:6:44
  › commonjs/assert-default.all.js:6:7



  es2015 › assert-star.all › assert star

  es2015/assert-star.all.js:4

   3: test('assert star', t => {
   4:     t.notThrows(() => assert(true));
   5: });

  Function threw:

  TypeError {
    message: 'assert is not a function',
  }

  › file://es2015/assert-star.all.js:4:23
  › file://es2015/assert-star.all.js:4:7



  commonjs › param-case-default.all › param-case default

  commonjs/param-case-default.all.js:6

   5: (0, ava_1.default)('param-case default', t => {
   6:     t.notThrows(() => (0, param_case_1.default)('hello world'));
   7: });

  Function threw:

  TypeError {
    message: '(0 , param_case_1.default) is not a function',
  }

  › commonjs/param-case-default.all.js:6:48
  › commonjs/param-case-default.all.js:6:7



  commonjs › param-case-star.all › param-case star

  commonjs/param-case-star.all.js:6

   5: (0, ava_1.default)('param-case star', t => {
   6:     t.notThrows(() => paramCase.default('hello world'));
   7: });

  Function threw:

  TypeError {
    message: 'paramCase.default is not a function',
  }

  › commonjs/param-case-star.all.js:6:40
  › commonjs/param-case-star.all.js:6:7



  commonjs › param-case-default-as.all › param-case default as

  commonjs/param-case-default-as.all.js:6

   5: (0, ava_1.default)('param-case default as', t => {
   6:     t.notThrows(() => (0, param_case_1.default)('hello world'));
   7: });

  Function threw:

  TypeError {
    message: '(0 , param_case_1.default) is not a function',
  }

  › commonjs/param-case-default-as.all.js:6:48
  › commonjs/param-case-default-as.all.js:6:7



  es2020 › assert-star.all › assert star

  es2020/assert-star.all.js:4

   3: test('assert star', t => {
   4:     t.notThrows(() => assert(true));
   5: });

  Function threw:

  TypeError {
    message: 'assert is not a function',
  }

  › file://es2020/assert-star.all.js:4:23
  › file://es2020/assert-star.all.js:4:7



  es2015 › es-cjs-default.all › es-cjs default

  es2015/es-cjs-default.all.js:4

   3: test('es-cjs default', t => {
   4:     t.notThrows(() => m(1));
   5: });

  Function threw:

  TypeError {
    message: 'm is not a function',
  }

  › file://es2015/es-cjs-default.all.js:4:23
  › file://es2015/es-cjs-default.all.js:4:7



  es2015 › assertron-default-as.all › assertron default as

  es2015/assertron-default-as.all.js:4

   3: test('assertron default as', t => {
   4:     t.notThrows(() => assertron.truthy(true));
   5: });

  Function threw:

  TypeError {
    message: 'assertron.truthy is not a function',
  }

  › file://es2015/assertron-default-as.all.js:4:33
  › file://es2015/assertron-default-as.all.js:4:7



  es2015 › assertron-star.all › assertron star

  es2015/assertron-star.all.js:4

   3: test('assertron star', t => {
   4:     t.notThrows(() => assertron.default.truthy(true));
   5: });

  Function threw:

  TypeError {
    message: 'assertron.default.truthy is not a function',
  }

  › file://es2015/assertron-star.all.js:4:41
  › file://es2015/assertron-star.all.js:4:7



  es2015 › cjs-default-as.all › cjs default as

  es2015/cjs-default-as.all.js:4

   3: test('cjs default as', t => {
   4:     t.notThrows(() => m(1));
   5: });

  Function threw:

  TypeError {
    message: 'm is not a function',
  }

  › file://es2015/cjs-default-as.all.js:4:23
  › file://es2015/cjs-default-as.all.js:4:7



  es2015 › cjs-default.all › cjs default

  es2015/cjs-default.all.js:4

   3: test('cjs default', t => {
   4:     t.notThrows(() => m(1));
   5: });

  Function threw:

  TypeError {
    message: 'm is not a function',
  }

  › file://es2015/cjs-default.all.js:4:23
  › file://es2015/cjs-default.all.js:4:7



  es2015 › es-cjs-default-as.all › es-cjs default as

  es2015/es-cjs-default-as.all.js:4

   3: test('es-cjs default as', t => {
   4:     t.notThrows(() => m(1));
   5: });

  Function threw:

  TypeError {
    message: 'm is not a function',
  }

  › file://es2015/es-cjs-default-as.all.js:4:23
  › file://es2015/es-cjs-default-as.all.js:4:7



  es2015 › es-cjs-star.all › es-cjs star

  es2015/es-cjs-star.all.js:4

   3: test('es-cjs star', t => {
   4:     t.notThrows(() => m.default(1));
   5: });

  Function threw:

  TypeError {
    message: 'm.default is not a function',
  }

  › file://es2015/es-cjs-star.all.js:4:32
  › file://es2015/es-cjs-star.all.js:4:7



  es2015 › assertron-default.all › assertron default

  es2015/assertron-default.all.js:4

   3: test('assertron default', t => {
   4:     t.notThrows(() => assertron.truthy(true));
   5: });

  Function threw:

  TypeError {
    message: 'assertron.truthy is not a function',
  }

  › file://es2015/assertron-default.all.js:4:33
  › file://es2015/assertron-default.all.js:4:7



  es2015 › cjs-star.all › cjs star

  es2015/cjs-star.all.js:4

   3: test('cjs star', t => {
   4:     t.notThrows(() => m.default(1));
   5: });

  Function threw:

  TypeError {
    message: 'm.default is not a function',
  }

  › file://es2015/cjs-star.all.js:4:32
  › file://es2015/cjs-star.all.js:4:7



  es2020 › assertron-default.all › assertron default

  es2020/assertron-default.all.js:4

   3: test('assertron default', t => {
   4:     t.notThrows(() => assertron.truthy(true));
   5: });

  Function threw:

  TypeError {
    message: 'assertron.truthy is not a function',
  }

  › file://es2020/assertron-default.all.js:4:33
  › file://es2020/assertron-default.all.js:4:7



  es2020 › assertron-default-as.all › assertron default as

  es2020/assertron-default-as.all.js:4

   3: test('assertron default as', t => {
   4:     t.notThrows(() => assertron.truthy(true));
   5: });

  Function threw:

  TypeError {
    message: 'assertron.truthy is not a function',
  }

  › file://es2020/assertron-default-as.all.js:4:33
  › file://es2020/assertron-default-as.all.js:4:7



  es2020 › es-cjs-star.all › es-cjs star

  es2020/es-cjs-star.all.js:4

   3: test('es-cjs star', t => {
   4:     t.notThrows(() => m.default(1));
   5: });

  Function threw:

  TypeError {
    message: 'm.default is not a function',
  }

  › file://es2020/es-cjs-star.all.js:4:32
  › file://es2020/es-cjs-star.all.js:4:7



  es2020 › cjs-star.all › cjs star

  es2020/cjs-star.all.js:4

   3: test('cjs star', t => {
   4:     t.notThrows(() => m.default(1));
   5: });

  Function threw:

  TypeError {
    message: 'm.default is not a function',
  }

  › file://es2020/cjs-star.all.js:4:32
  › file://es2020/cjs-star.all.js:4:7



  es2022 › cjs-default.all › cjs default

  es2022/cjs-default.all.js:4

   3: test('cjs default', t => {
   4:     t.notThrows(() => m(1));
   5: });

  Function threw:

  TypeError {
    message: 'm is not a function',
  }

  › file://es2022/cjs-default.all.js:4:23
  › file://es2022/cjs-default.all.js:4:7



  es2020 › cjs-default-as.all › cjs default as

  es2020/cjs-default-as.all.js:4

   3: test('cjs default as', t => {
   4:     t.notThrows(() => m(1));
   5: });

  Function threw:

  TypeError {
    message: 'm is not a function',
  }

  › file://es2020/cjs-default-as.all.js:4:23
  › file://es2020/cjs-default-as.all.js:4:7



  es2020 › cjs-default.all › cjs default

  es2020/cjs-default.all.js:4

   3: test('cjs default', t => {
   4:     t.notThrows(() => m(1));
   5: });

  Function threw:

  TypeError {
    message: 'm is not a function',
  }

  › file://es2020/cjs-default.all.js:4:23
  › file://es2020/cjs-default.all.js:4:7



  es2022 › cjs-star.all › cjs star

  es2022/cjs-star.all.js:4

   3: test('cjs star', t => {
   4:     t.notThrows(() => m.default(1));
   5: });

  Function threw:

  TypeError {
    message: 'm.default is not a function',
  }

  › file://es2022/cjs-star.all.js:4:32
  › file://es2022/cjs-star.all.js:4:7



  es2022 › cjs-default-as.all › cjs default as

  es2022/cjs-default-as.all.js:4

   3: test('cjs default as', t => {
   4:     t.notThrows(() => m(1));
   5: });

  Function threw:

  TypeError {
    message: 'm is not a function',
  }

  › file://es2022/cjs-default-as.all.js:4:23
  › file://es2022/cjs-default-as.all.js:4:7



  es2020 › es-cjs-default-as.all › es-cjs default as

  es2020/es-cjs-default-as.all.js:4

   3: test('es-cjs default as', t => {
   4:     t.notThrows(() => m(1));
   5: });

  Function threw:

  TypeError {
    message: 'm is not a function',
  }

  › file://es2020/es-cjs-default-as.all.js:4:23
  › file://es2020/es-cjs-default-as.all.js:4:7



  es2020 › es-cjs-default.all › es-cjs default

  es2020/es-cjs-default.all.js:4

   3: test('es-cjs default', t => {
   4:     t.notThrows(() => m(1));
   5: });

  Function threw:

  TypeError {
    message: 'm is not a function',
  }

  › file://es2020/es-cjs-default.all.js:4:23
  › file://es2020/es-cjs-default.all.js:4:7



  es2022 › assert-star.all › assert star

  es2022/assert-star.all.js:4

   3: test('assert star', t => {
   4:     t.notThrows(() => assert(true));
   5: });

  Function threw:

  TypeError {
    message: 'assert is not a function',
  }

  › file://es2022/assert-star.all.js:4:23
  › file://es2022/assert-star.all.js:4:7



  es2020 › assertron-star.all › assertron star

  es2020/assertron-star.all.js:4

   3: test('assertron star', t => {
   4:     t.notThrows(() => assertron.default.truthy(true));
   5: });

  Function threw:

  TypeError {
    message: 'assertron.default.truthy is not a function',
  }

  › file://es2020/assertron-star.all.js:4:41
  › file://es2020/assertron-star.all.js:4:7



  es2022 › assertron-star.all › assertron star

  es2022/assertron-star.all.js:4

   3: test('assertron star', t => {
   4:     t.notThrows(() => assertron.default.truthy(true));
   5: });

  Function threw:

  TypeError {
    message: 'assertron.default.truthy is not a function',
  }

  › file://es2022/assertron-star.all.js:4:41
  › file://es2022/assertron-star.all.js:4:7



  es2022 › assertron-default-as.all › assertron default as

  es2022/assertron-default-as.all.js:4

   3: test('assertron default as', t => {
   4:     t.notThrows(() => assertron.truthy(true));
   5: });

  Function threw:

  TypeError {
    message: 'assertron.truthy is not a function',
  }

  › file://es2022/assertron-default-as.all.js:4:33
  › file://es2022/assertron-default-as.all.js:4:7



  es2022 › assertron-default.all › assertron default

  es2022/assertron-default.all.js:4

   3: test('assertron default', t => {
   4:     t.notThrows(() => assertron.truthy(true));
   5: });

  Function threw:

  TypeError {
    message: 'assertron.truthy is not a function',
  }

  › file://es2022/assertron-default.all.js:4:33
  › file://es2022/assertron-default.all.js:4:7



  es2022 › es-cjs-default-as.all › es-cjs default as

  es2022/es-cjs-default-as.all.js:4

   3: test('es-cjs default as', t => {
   4:     t.notThrows(() => m(1));
   5: });

  Function threw:

  TypeError {
    message: 'm is not a function',
  }

  › file://es2022/es-cjs-default-as.all.js:4:23
  › file://es2022/es-cjs-default-as.all.js:4:7



  es2022 › es-cjs-default.all › es-cjs default

  es2022/es-cjs-default.all.js:4

   3: test('es-cjs default', t => {
   4:     t.notThrows(() => m(1));
   5: });

  Function threw:

  TypeError {
    message: 'm is not a function',
  }

  › file://es2022/es-cjs-default.all.js:4:23
  › file://es2022/es-cjs-default.all.js:4:7



  es2022 › es-cjs-star.all › es-cjs star

  es2022/es-cjs-star.all.js:4

   3: test('es-cjs star', t => {
   4:     t.notThrows(() => m.default(1));
   5: });

  Function threw:

  TypeError {
    message: 'm.default is not a function',
  }

  › file://es2022/es-cjs-star.all.js:4:32
  › file://es2022/es-cjs-star.all.js:4:7

  ─

  35 tests failed
undefined
/home/homa/code/cyberuni/ts-esm-interop/tests/node-allow:
 ERR_PNPM_RECURSIVE_RUN_FIRST_FAIL  node-allow@1.0.0 test: `ava`
Exit status 1
 ELIFECYCLE  Command failed with exit code 1.
